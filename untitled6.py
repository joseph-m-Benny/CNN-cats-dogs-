# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1np8BqX3UniwmlkaNcgjEYay08Y6BVj8T
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import layers,models,callbacks
import pandas  as pd

from google.colab import drive
drive.mount('/content/drive')

dataset_dir='/content/drive/MyDrive/Cats_Dogs'

import tensorflow as tf

img_size = (180, 180)
batch_size = 32

train_ds = tf.keras.utils.image_dataset_from_directory(
    dataset_dir,
    image_size=img_size,
    batch_size=batch_size,
    seed=42,
    validation_split=0.2,
    subset="training"
)

val_ds = tf.keras.utils.image_dataset_from_directory(
    dataset_dir,
    image_size=img_size,
    batch_size=batch_size,
    seed=42,
    validation_split=0.2,
    subset="validation"
)

model = models.Sequential([
    layers.Rescaling(1./255, input_shape=(180, 180, 3)),

    layers.Conv2D(32, (3,3), activation='relu'),
    layers.MaxPooling2D(),

    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D(),

    layers.Conv2D(128, (3,3), activation='relu'),
    layers.MaxPooling2D(),

    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # binary output
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=10
)

loss, acc = model.evaluate(val_ds)
print(f"Validation Accuracy: {acc*100:.2f}%")

import numpy as np
from tensorflow.keras.utils import load_img, img_to_array

img_path = '/content/drive/MyDrive/Cats_Dogs/dogs/dog.11.jpg'
img_size = (180, 180)

img = load_img(img_path, target_size=img_size)
x = img_to_array(img)
x = np.expand_dims(x, axis=0)

pred = model.predict(x)
print(pred)

"""this is the image to test"""

plt.imshow(x[0].astype("uint8")) # Remove batch dimension and display
plt.axis('off') # Hide axes
plt.show()

if pred[0][0] >= 0.5:
    print(f"Dog 🐶 ({pred[0][0]*100:.2f}% confidence)")
else:
    print(f"Cat 🐱 ({(1 - pred[0][0])*100:.2f}% confidence)")

import numpy as np
from tensorflow.keras.utils import load_img, img_to_array

img_path = '/content/drive/MyDrive/Cats_Dogs/cats/cat.101.jpg'

img_size = (180, 180)

img = load_img(img_path, target_size=img_size)
x = img_to_array(img)
x = np.expand_dims(x, axis=0)
plt.imshow(x[0].astype("uint8"))
pred = model.predict(x)
print(pred)

if pred[0][0] >= 0.5:
    print(f"Dog 🐶 ({pred[0][0]*100:.2f}% confidence)")
else:
    print(f"Cat 🐱 ({(1 - pred[0][0])*100:.2f}% confidence)")

